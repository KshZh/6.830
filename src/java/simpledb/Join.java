package simpledb;

import java.util.*;

import com.sun.org.apache.xpath.internal.axes.ChildIterator;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {
	private JoinPredicate joinPredicate;  // JoinPredicate中已经包含了要比较的两个Tuple的两个字段的编号。
	private OpIterator childIterator1;
	private OpIterator childIterator2;
	private TupleDesc tupleDesc;
	private Tuple pendingTuple1;
	private Tuple pendingTuple2;

    private static final long serialVersionUID = 1L;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
    	this.joinPredicate = p;
    	this.childIterator1 = child1;
    	this.childIterator2 = child2;
    	this.tupleDesc = TupleDesc.merge(childIterator1.getTupleDesc(), childIterator2.getTupleDesc());
    	this.pendingTuple1 = null;
    	this.pendingTuple2 = null;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return joinPredicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return childIterator1.getTupleDesc().getFieldName(joinPredicate.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return childIterator2.getTupleDesc().getFieldName(joinPredicate.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return tupleDesc;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
    	super.open();
    	childIterator1.open();
    	childIterator2.open();
    }

    public void close() {
        // some code goes here
    	super.close();
    	childIterator1.close();
    	childIterator2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
    	childIterator1.rewind();
    	childIterator2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
    	// 注意，join做的操作是笛卡尔积，而不是简单地把行号相等的行连接起来。
    	Tuple tuple = new Tuple(tupleDesc);
    	Tuple tuple1, tuple2;
    	while (childIterator1.hasNext() || pendingTuple1!=null) {
    		if (pendingTuple1 != null) {
    			tuple1 = pendingTuple1;
    			pendingTuple1 = null;
    		} else {
    			tuple1 = childIterator1.next();	
    		}
    		if (pendingTuple2 == null) {
    			childIterator2.rewind();
    		}
    		while (childIterator2.hasNext() || pendingTuple2!=null) {
    			if (pendingTuple2 != null) {
    				tuple2 = pendingTuple2;
    				pendingTuple2 = null;
    			} else {
    				tuple2 = childIterator2.next();
    			}
	    		if (joinPredicate.filter(tuple1, tuple2)) {
	    			int n = 0;
	    			for (int i = 0; i < tuple1.getTupleDesc().numFields(); i++, n++) {
						tuple.setField(n, tuple1.getField(i));
					}
	    			for (int i = 0; i < tuple2.getTupleDesc().numFields(); i++, n++) {
						tuple.setField(n, tuple2.getField(i));
					}
	    			if (childIterator2.hasNext()) {
	    				 pendingTuple2 = childIterator2.next();
	    				 pendingTuple1 = tuple1;
	    			} else {
	    				// pendingTuple1和pendingTuple2继续保持为null。
	    			}
	    			return tuple;
	    		}
    		}
    	}
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
    	return new OpIterator[]{childIterator1, childIterator2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
    	childIterator1 = children[0];
    	childIterator2 = children[1];
    }

}
